<script type="text/javascript">

// reserved global vars:
// 1. clearFilter
var mappingTable; //initialised on page load

function initDashboard()
{

    functionalTools.init();

    //gallery-user-patch-2530294 (scroll/sort column mis-alignment)
    YUI().use("datatable", "datatable-scroll", "datasource", "node", "panel", "cookie", "json-parse", function(Y) {

        //global var
        cols = $keyMappingColumnJson;
        //TODO: get this from the controller?  Have to filter on those we want to hide; eg. version and isTemplate
        columnAliases = ["Id","Business", "HandleType", "HandleTemplate","AnalyticMode", "AnalyticType", "AnalyticVersion", "AssetNames","AssetNamesAlias", "BusinessDate", "DataMode", "DomesticCurrency", "ForeignCurrencies", "HolidayCities", "Methodology", "ObjectSubType", "ObjectType","Version","LastUpdatedBy","LastUpdatedTime","IsTemplate","IsDeleted"];

        Y.one("#filter").on('keyup',function (e) {
            clearTimeout(filterTimeout);
            setTimeout( "updateFilter()", 600);
            //TODO: prevent this firing multiple times
        });

        //re-apply existing filter
        var filterJson = Y.Cookie.get("filters");
        if(filterJson){
            var filters = Y.JSON.parse(filterJson);
            for(var i = 0; i < filters.length; i++){
                filterQuery.append(filters[i]);
            }
        }

        refreshDataSource(filters);

    }); //end Yui loader
}

//--------------------------------------------------//
//      Dynamic table creation
//--------------------------------------------------//
function fetchData(columnAliases, columnDefs){

    YUI().use("io-base", function(Y) {
        var cfg = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        };

        var handleSuccess = function(id, o, args){
            var dataSource = createDataSource(o.responseText, columnAliases, columnDefs);
            if( !mappingTable){
                mappingTable = createTable(dataSource, columnDefs);
            }else{
                YUI().use("datatable", function(Y){
                    mappingTable.plug(Y.Plugin.DataTableDataSource, { datasource: dataSource });
                    mappingTable.datasource.load();
                });
            }
        }
        var handleFailure = function(id, o, args){
            alert('fetchData failed: ' + o.responseText + ", " + o.statusText);
        }

        Y.on('io:success', handleSuccess, Y);
        Y.on('io:failure', handleFailure, Y);
        Y.io("control?Action=GetData&User=$User" + getFilterParams(), cfg);
    });

}

function createDataSource(json, columnAliases, columnDefs){
    var dataSource;
    YUI().use("datasource", "json-parse", function(Y){
        var data = Y.JSON.parse(json);
        dataSource = new Y.DataSource.Local({ source: data });
        dataSource.plug(Y.Plugin.DataSourceArraySchema, {
            schema: {
                resultFields: columnAliases
            }
        });
    });
    return dataSource;
}

function createTable(dataSource,columnDefs) {
    var table;
    YUI().use("datatable", "datatable-scroll", "node", function(Y){
        table = new Y.DataTable({
            columns : columnDefs
        });

        table.plug(Y.Plugin.DataTableDataSource, { datasource: dataSource });
        table.datasource.load();

        //re-attach recordset onInitialise
        table.datasource.onDataReturnInitializeTable = function (e) {
            this.get("host").set("recordset", new Y.Recordset({records: e.response.results}));
            this.get("host").plug(Y.Plugin.DataTableSort, {
                lastSortedBy: {
                    field: "field1",
                    dir: "asc"
                }
            });
         }


        table.render("#dashboardDetailList");

        //# if( $HasWriteAccess.bool )
        Y.delegate('dblclick', function(e) {
            var record = this.getRecord(e.target);
            YUI().use("json-stringify", function(Y){
                alert('record: ' + record + ", " + Y.JSON.stringify(record));
            });
            //var recordSet = this.get('recordset');
            //var record = recordSet.getRecord(e.target.ancestor('tr').get('id'));

            //de-select all rows
            //recordSet.each(function(oneRecord, i){oneRecord.unselect();});
            //record.select();

            saveOrUpdateRecord(record.getValue());
        }, '#dashboardDetailList', 'td', table);
        //# end
    });
    return table;
}




//--------------------------------------------------//
//      FILTERING
//--------------------------------------------------//
filterTimeout = null;
var updateFilter = function (column, text) {

    YUI().use("node","cookie","json-stringify", function(Y){
        // Reset timeout
        filterTimeout = null;
        var filterColumn = column || Y.one("#filterColumn").get("value");
        var filterText = text;
        if(typeof filterText === "undefined"){
            filterText = Y.one("#filter").get("value");
        }

        var query;
        if( filterText === ""){

            if(filterQuery.getQuery().length === 0){ return; }

            query = filterQuery.clear(filterColumn);
        }else {
            query = filterQuery.append( {key:filterColumn, value:htmlEncode(filterText)} );
        }

        //remember current filter
        Y.Cookie.set("filters", Y.JSON.stringify(query));

        refreshDataSource(query);

    });

};

var filterQuery = {
    query: [],
    getQuery: function() { return this.query; },
    reset: function() { this.query = []; return this.query;},
    clear: function(key) {
        this.query = this.query.filter(function(elem) { return elem['key'] !== key; }); return this.query;  },
    getQueryValue: function(key) { var found = this.containsKey(key); return (found ? found['value'] : ''); },
    containsKey: function(key) {
        return (this.query.filter(function(elem) { return elem['key'] === key; }).length > 0); },
    append: function(newJsonPair) {

        var key = newJsonPair['key'];
        if(this.containsKey(key)){
            this.clear(key);
        }

        this.query.push(newJsonPair);
        return this.query;
    }
};

function refreshDataSource(q) {

    updateBreadCrumbs();
    fetchData(columnAliases, cols);

    /*
    var query = q || filterQuery.getQuery();

    dataSource.sendRequest(query.concat({key:"IsDeleted", value:"N"}).makeSet(), {
        success: table.onDataReturnInitializeTable,
        failure: table.onDataReturnInitializeTable,
        argument: table.getState(),
        scope: table
        });
    */
}

function htmlEncode(str) {
    return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function htmlDecode(str) {
    return String(str)
    .replace(/&amp/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>');
}

var clearFilter = function(sKey) {
    YUI().use("node", function(Y){
        updateFilter(sKey, "");
        if( sKey === Y.one("#filterColumn").get("value")){
            Y.one("#filter").set("value", "");
        }
    });
}

function updateBreadCrumbs() {

    //alert('f: ' + getFilterParams());
    var breadcrumbs = document.getElementById('filterBreadcrumb');

    if(breadcrumbs) {

        var filters = filterQuery.getQuery();
        var str = (filters && filters.length > 0) ? 'Active filters: ' : '';

        for(var i = 0; i < filters.length; i++){
            str += [filters[i]['key'], '=', filters[i]['value'], ' ', getDeleteLink(filters[i]['key']), ((i+1 < filters.length) ? '\, ' : '')].join('');
        }

        breadcrumbs['innerHTML'] = str;
    }

    return true;
}


function getDeleteLink(sKey) {
    return ["<button type=\"button\" onclick=\"clearFilter('", sKey, "'); return true;\">clear</button>"].join('');
}

function getFilterParams(){

    str='';
    var filters = filterQuery.getQuery();
    for(var i = 0; i < filters.length; i++){
        str += '&filterColumn=' + filters[i]['key']  + '&filterText=' + htmlEncode(filters[i]['value']);
    }

    return str;
}

//--------------------------------------------------//
//      EDIT
//--------------------------------------------------//
function saveOrUpdateRecord(rowData){

    var handleSuccess = function(o) {
            YUI().use('json-parse', function (Y) {
                var json = o.responseText;
                var row = Y.JSON.parse(json);
                addOrUpdateRow(row);
            });
        };

    var editDialog = createEditDialog(handleSuccess, rowData);

    if( rowData !== null){
        //populate with existing data
        populateDialogFromRow(rowData);

        // Render the Dialog
        editDialog.render();
        if( rowData.IsDeleted === "N"){
            editDialog.show();
        } else {
            editDialog.submit();
        }
    };

}

function addOrUpdateRow(row){
    //find the row with the data we want to update (by Id)
    var index = -1;
    for(var i = 0; i < data.length; i++) {
        if( row.Id === data[i].Id){
            index = i;
            break;
        }
    }
    if( index > -1){
        //data.splice(index, 1, row); //replace existing
        table.updateRow(row, index);
    }else {
        //data.push(row); //add new
        table.addRow(0, row)
    }

    refreshDataSource();
}

//update local cache with data from server
function fullDataReload() {
    YUI().use("cookie", "json-stringify", function(Y){
        var filters = filterQuery.getQuery();
        Y.Cookie.set("filters", Y.JSON.stringify(filters));
        location.reload(true);
    })
}

function createEditDialog(handleSuccess, rowData){
    // Define various event handlers for Dialog
    var handleClone = function() {
        document.getElementById('editFieldId').value = "-1";
        document.getElementById('editFieldVersion').value = "1";
        document.getElementById('editFieldHandleTemplate').value = document.getElementById('editFieldHandleTemplate').value + '_clone';
        /*remove clone/delete buttons*/
        var buttons = this.getButtons();
        buttons[0]._button.style.display = "none";
        buttons[1]._button.style.display = "none";
        buttons.removeChild(0);
        buttons.removeChild(0);
        /*
        for(var i = 0; i < buttons.length; i++){
            alert('button: ' + buttons[i]._button.innerHTML + " ," + buttons[i]._button.hidden);
        }
        */
    };
    var handleDelete = function() {
        if(confirm("Are you sure you want to delete " + document.getElementById('editFieldId').value + "?")) {
            document.getElementById('editFieldIsDeleted').value = "Y";
            this.submit();
        }
    };
    var handleSubmit = function() {
    this.submit();
    };
    var handleCancel = function() {
    this.cancel();
    };
    var handleFailure = function(o) {
        alert('Submission failed'
        + '\nstatus=' + o.status
        + '\nstatusText=' + o.statusText
        + '\n' + o.responseText
        + '\n\nThe page will now reload, please again.');
        //refresh underlying data
        fullDataReload();
    };

    // Remove progressively enhanced content class, just before creating the module
    Y.get("#editDialog").removeClass("yui-pe-content");

    var buttons = [];
    if( rowData.Id !== -1){
        buttons.push({ text:"Clone", handler:handleClone });
        buttons.push({ text:"Delete", handler:handleDelete });
    }
    buttons.push({ text:"Save", handler:handleSubmit, isDefault:true });
    buttons.push({ text:"Cancel", handler:handleCancel });

    // Instantiate the Dialog
    var editDialog = new Y.panel("#editDialog",
        {
            width : "40em",
            fixedcenter : true,
            visible : false,
            constraintoviewport : true,
            buttons : buttons,
            close:false
        }
     );

    // Validate the entries in the form to require that both first and last name are entered
    editDialog.validate = function() {
        var data = this.getData();  //TODO: client side validation...
        if (data.business === "" || data.handleType === "" || data.handleTemplate === "") {
        alert('Primary key field cannot be blank');
        document.getElementById('editFieldHandleTemplate').focus();
        return false;
        } else {
        return true;
        }
    };

    // Wire up the success and failure handlers
    editDialog.callback = { success: handleSuccess,
    failure: handleFailure };

    return editDialog;

}

function populateDialogFromRow(rowData) {

    //NB myDataSource.responseSchema is picked up from global variable rather than passed to function
    for(var n = 0; n < columnAliases.length; n++ ){
        try {
            //var columnName = columnAliases[n].key;
            var columnName = columnAliases[n];
            var value = rowData[columnName];
            if( typeof value === "undefined"){
                value = "";
            }
            document.getElementById('editField' + columnName).value = htmlDecode(value);
        }catch (e) {
        }

    };

}



</script>
